import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import acm.graphics.GImage;
import acm.graphics.GLabel;
import acm.graphics.GOval;
import acm.graphics.GRect;
import acm.program.GraphicsProgram;
import acm.util.RandomGenerator;

public class MainGame extends GraphicsProgram implements Runnable {

	int width, height;
	GLabel btnNewGame, btnLoadGame, btnSaveGame, btnInventory;
	Font fHead = new Font("Serif", Font.BOLD, 16); Font fStat = new Font("Serif", Font.BOLD, 12);
	Color bg = new Color(209,209,209);
    Color bar = new Color(193,85,1);
    Color snow = new Color(180,212,255);
    private Color menuColor = new Color(52, 63, 71);
    
    GImage imgTitle = new GImage("../Images/TitleLogo.png");
    
    JButton btnNG, btnTL, btnFL, btnMovable;
    
    JTextField tfWord, tf;
	JTextArea tfEventArea;
	JScrollPane eventPane;
	
	GOval[] weather = new GOval[500];
	
	ArrayList<ArrayList<Tile>> tilePieces = new ArrayList<ArrayList<Tile>>();
	ArrayList<ArrayList<Integer>> passableList = new ArrayList<ArrayList<Integer>>();
	Tile[][] tiles = new Tile[8][8];
	
	
	Scanner reader = new Scanner(System.in);  // Reading from System.in
	
	private RandomGenerator rand = new RandomGenerator();
	
	private static final double DELAY = 1;
	
	
	int condition = 0;
	boolean paused = false;
	
	public void init() {
		this.setSize(600,600); width = getWidth(); height = getHeight();
	    setBackground(menuColor); 
	    Frame c = (Frame)this.getParent().getParent(); c.setTitle("KONANE");
	    //getContentPane().setLayout(new BorderLayout());
	    tfEventArea = new JTextArea(10, 10); tfEventArea.setLineWrap(true); tfEventArea.setWrapStyleWord(true);
        tfEventArea.setEditable(false); eventPane = new JScrollPane(tfEventArea); eventPane.setBounds(10, 440, 575, 150);
        eventPane.setBorder(BorderFactory.createMatteBorder(2, 2, 2, 2, Color.BLACK)); add(eventPane, 12, 440);
        
        //tfEventArea.setText(quoteList.q23);
        
        btnNG = new JButton("New Game"); btnNG.setBounds(1,1,100,30);  btnNG.addActionListener(this);
        btnNG.setToolTipText("Create a New Game"); add(btnNG, 1, 1);

        btnTL = new JButton("Turn Log");  btnTL.setBounds(102,1,80,30);
        btnTL.addActionListener(this); add(btnTL, 102, 1); btnTL.setEnabled(false);

        btnFL = new JButton("Full Log"); btnFL.setBounds(184,1,80,30);
        btnFL.addActionListener(this); add(btnFL, 184, 1);
        
        btnMovable = new JButton("Inventory"); btnMovable.setBounds(266,1,100,30);
        btnMovable.addActionListener(this); add(btnMovable, 266, 1);
        //makeScreen();
        
        
	    GRect rectTop = new GRect(0,0,600,30); rectTop.setFilled(true); rectTop.setFillColor(bar); rectTop.setColor(bar); add(rectTop);
        GRect rectBot = new GRect(0, 430, 600, 170); rectBot.setFilled(true); rectBot.setFillColor(bar); rectBot.setColor(bar); add(rectBot);
        
        add(imgTitle, width/2 - imgTitle.getWidth()/2, 100);
	    addMouseListeners();
	    addKeyListeners();
	    
	}
	
	public void run() {
		
		//int x = 0;
		while (true) {
			if (paused) pause(DELAY);
			else {
			if (condition == 1) animateConfetti(1);
			else if (condition == 2) animateConfetti(2);
			pause(DELAY); 
			}
		}
	}
	
	
	public void actionPerformed(ActionEvent evt) {
		if (evt.getActionCommand().equals("New Game")) {
			sm.newFile(200, 200, 220, 220, this);
			btnINV.setEnabled(false);
			btnNG.setEnabled(false);
			btnSG.setEnabled(false);
			btnLS.setEnabled(false);
		}
		if (evt.getActionCommand().equals("Load File")) {
			sm.loadFile(200, 200, 220, 220, this);
			btnINV.setEnabled(false);
			btnNG.setEnabled(false);
			btnSG.setEnabled(false);
			btnLS.setEnabled(false);
		}
		if (evt.getActionCommand().equals("Save File")) {
			sm.saveFile(200, 200, 220, 220, this);
			btnINV.setEnabled(false);
			btnNG.setEnabled(false);
			btnSG.setEnabled(false);
			btnLS.setEnabled(false);
		}
		if (evt.getActionCommand().equals("Inventory")) {
			if (p != null) {
				inv.openInventory(150, 150, 300, 300, p.classChar, p, this);
				btnINV.setEnabled(false);
				btnNG.setEnabled(false);
				btnSG.setEnabled(false);
				btnLS.setEnabled(false);
			}
		}
	}
	
	
	public void makeBoard() {
		tilePieces.clear();
		passableList.clear();
		
		for (int x = 0; x < 9; x++) {
	    	tilePieces.add(new ArrayList<Tile>());
	    	passableList.add(new ArrayList<Integer>());
	    	for (int y = 0;; y < 9; y++) {
	    		passableList.get(x).add(1); 
	    		if (other) other = false; tilePieces.get(y).add(new Tile (40,40, 0)); 
	    		else other = true; tilePieces.get(y).add(new Tile (40,40, 0)); 
	    	}
	    	
		}
	}
	public void drawConfetti() {
		for (int i = 0 ; i < 500 ; i++) {
			weather[i] = new GOval(0,0); weather[i].setSize(3, 3);  weather[i].setFilled(true);  weather[i].setFillColor(rand.nextColor());
			weather[i].setColor(Color.BLACK); add(weather[i], rand.nextDouble(-400, 550), rand.nextDouble(-10, 410));  
		}
	}
	public void animateConfetti(int cond) {
		int endCond = cond;
		for (int i = 0 ; i < 500 ; i++) {
			if (endCond == 1) {
				weather[i].move(.05, .1);
				if (weather[i].getY() >= 420) weather[i].setLocation(rand.nextDouble(-400, 600), rand.nextDouble(-10, -100)); 
			}
			else if (endCond == 2) {
				weather[i].move(.05, .3);
				if (weather[i].getY() >= 420) weather[i].setLocation(rand.nextDouble(-80, 600), rand.nextDouble(-10, -500));
			}
		}
	}
}

